;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Generated by Ben Fowler's C- compiler
;; ITB464 Modern Compiler Construction.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.TITLE output
.FILE "output.dcl"

.EXPORT _main

.IMPORT _input
.IMPORT _output

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variable "x" is an array of type integer and size 10

.VAR
    _x: .WORD 10

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function declaration for "minloc()"

.PROC _minloc(.NOCHECK,.SIZE=12,.NODISPLAY,.ASSEMBLY=0)
;; Parameter "a"
  .LOCAL _a 8,4 (0,0,0)

;; Parameter "low"
  .LOCAL _low 12,4 (0,0,0)

;; Parameter "high"
  .LOCAL _high 16,4 (0,0,0)

;; Local variable "i"
  .LOCAL _i -4,4 (0,0,0)

;; Local variable "x"
  .LOCAL _x -8,4 (0,0,0)

;; Local variable "k"
  .LOCAL _k -12,4 (0,0,0)

.ENTRY
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -12
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate array offset
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
;; dereference resulting address
        derefW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
        pshLit  1
        add     noTrap
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
;; WHILE statement
;; if expression evaluates to FALSE, exit loop
label0:
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
;; calculate effective address of variable
;; push parm address
        pshAP   8
        derefW
        intLS
        brFalse  label1
;; IF statement
;; if false, jump to else-part
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
;; dereference resulting address
        derefW
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        derefW
        intLS
        brFalse label2
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
;; dereference resulting address
        derefW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -12
        assignW
        branch label3
label2:
label3:
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  1
        add     noTrap
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
        branch  label0
label1:
;; calculate effective address of variable
;; push address of local
        pshLP   -12
        derefW
        popRetW
        exit
        exit
        endP
.ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function declaration for "sort()"

.PROC _sort(.NOCHECK,.SIZE=12,.NODISPLAY,.ASSEMBLY=12)
;; Parameter "a"
  .LOCAL _a 8,4 (0,0,0)

;; Parameter "low"
  .LOCAL _low 12,4 (0,0,0)

;; Parameter "high"
  .LOCAL _high 16,4 (0,0,0)

;; Local variable "i"
  .LOCAL _i -4,4 (0,0,0)

;; Local variable "k"
  .LOCAL _k -8,4 (0,0,0)

;; Local variable "t"
  .LOCAL _t -12,4 (0,0,0)

.ENTRY
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push parm address
        pshAP   4
        derefW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
;; WHILE statement
;; if expression evaluates to FALSE, exit loop
label4:
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
;; calculate effective address of variable
;; push parm address
        pshAP   8
        derefW
        pshLit  1
        sub     noTrap
        intLS
        brFalse  label5
;; ** assignment statement*
;; evaluate rvalue as value
;; leave address of array on stack
        pshAP   0
        derefW
        mkPar   4,0
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        mkPar   4,4
;; calculate effective address of variable
;; push parm address
        pshAP   8
        derefW
        mkPar   4,8
        call    _minloc,3
        pshRetW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
;; dereference resulting address
        derefW
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -12
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
;; dereference resulting address
        derefW
;; evaluate lvalue as address
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -8
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push address of local
        pshLP   -12
        derefW
;; evaluate lvalue as address
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
        pshAP   0
        derefW
;; index into array
        add     noTrap
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  1
        add     noTrap
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
        branch  label4
label5:
        exit
        endP
.ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function declaration for "main()"

.PROC _main(.NOCHECK,.SIZE=4,.NODISPLAY,.ASSEMBLY=12)
;; Local variable "i"
  .LOCAL _i -4,4 (0,0,0)

.ENTRY
;; ** assignment statement*
;; evaluate rvalue as value
        pshLit  0
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
;; WHILE statement
;; if expression evaluates to FALSE, exit loop
label6:
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  10
        intLS
        brFalse  label7
;; ** assignment statement*
;; evaluate rvalue as value
        call    _input,0
        pshRetW
;; evaluate lvalue as address
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
;; push address of global variable
        pshAdr  _x
;; index into array
        add     noTrap
        assignW
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  1
        add     noTrap
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
        branch  label6
label7:
;; leave address of array on stack
;; push address of global variable
        pshAdr  _x
        mkPar   4,0
        pshLit  0
        mkPar   4,4
        pshLit  10
        mkPar   4,8
        call    _sort,3
;; ** assignment statement*
;; evaluate rvalue as value
        pshLit  0
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
;; WHILE statement
;; if expression evaluates to FALSE, exit loop
label8:
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  10
        intLS
        brFalse  label9
;; calculate array offset
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  4
        mul     noTrap
;; get address of array onto stack
;; push address of global variable
        pshAdr  _x
;; index into array
        add     noTrap
;; dereference resulting address
        derefW
        mkPar   4,0
        call    _output,1
;; ** assignment statement*
;; evaluate rvalue as value
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        derefW
        pshLit  1
        add     noTrap
;; evaluate lvalue as address
;; calculate effective address of variable
;; push address of local
        pshLP   -4
        assignW
        branch  label8
label9:
        exit
        endP
.ENDP

